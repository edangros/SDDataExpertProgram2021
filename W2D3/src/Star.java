public class Star {
    public static void main(String[] args){

        //별그리기 방법 1 : 지정된 횟수만큼 문자열 더하기
        String s;
        for(int i = 0;i<10;i++){
            s= "";
            //문자열 곱셈이 없으므로 문자를 정해진 횟수만큼 더합니다
            for(int j=0;j<i;j++){
                s = s+"*";
                // 다만 intellij IDEA(이클립스같은 프로그램)에서 '반복문 내에서의 문자열 덧셈'이라고 경고를 보냅니다.
                //      (경고는 '오류'와는 달리 프로그램이 작동은 하지만 문제가 잠재되어 있을때
                //       IDE(이클립스나 IDEA 같은 프로그램들)에서 수정을 권고하기 위해 표시시키는 메세지입니다)
                // 이는 루프 안에서 문자열 연산이 돌 경우 '리터럴'이 급증해 메모리에 악영향을 주기 때문입니다.
                // "" -> "*" -> "**"->"***"..... 이렇게 모든 문자가 메모리에 저장되어버리게 되고
                // 가비지 콜렉터가 돌기 전까지 저 데이터는 메모리에 남으며
                // 가비지 콜렉터가 쓰레기로 판별해서 치우는 과정에서 컴퓨터 자원을 또 소모하게 됩니다.
                // 따라서 문자열 연산이 많고, 적극적으로 권장하는 파이썬과 달리 대부분의 C계열 언어들은
                // 성능 향상을 위하여 문자열 연산을 문자열로 계속 진행하는 데에 비교적 소극적입니다.
                // (ex : 게임에서 화면에 글씨를 '한 글자씩' 띄울 때에는 문자열이 아닌 '문자'(char)를 읽은 뒤
                //      문자를 이미지로 그려놓고 다음 '문자'를 다시 그립니다.)
                // --안녕하세요--를 매 초마다 한 글자씩 그린다면
                // "안" -> "안녕" -> "안녕하" -> "안녕하세" -> "안녕하세요"로 그리는 게 아니라
                // "안" 그림 -> 그 옆에 "녕" 그림 -> 그 옆에 "하" 그림....
                // (언어의 철학이 다소 다릅니다. 파이썬은 '파이썬다움'이라는 말까지 쓰일 정도로 튑니다.)
            }
            System.out.println(s);
        }

        //1번방법 '자바스럽게' 고치기 (StringBuilder)
        /*  이럴때 StringBuilder를 사용할 수 있습니다.
            문자열 리터럴은 문자 배열과 같습니다. 메모리에서 문자열 길이만큼 공간을 받아 할당되고, 길이변경이 안됩니다.
            (사실 상수로 취급되어서 길이변경 뿐만 아니라 그냥 수정 자체가 안됩니다)
            따라서 문자열 연산이 이루어질 때마다 새로운 문자열(문자 배열)을 메모리에 만들고 그 값을 변수에 할당시킵니다.
            ex )
            String a = "a", b="b"; => "a"와 "b"를 메모리에 올림
            c = a+b =>"a"와 "b"를 합친 새로운 문자열 "ab"를 메모리에 올려 c에 할당
            c = c+"c" =>"c"를 메모리에 올리고 그걸 "ab"에 더한 "abc"를 메모리에 올려 c에 할당
            유연한 연산을 하기에 이런 상수 타입은 큰 문제가 있으므로, 문자열을 리스트처럼 다루는 StringBuilder가
            자바에서 기본으로 제공됩니다.
            리스트는 뒤에 덧붙이고 중간에서 빼는 연산 등이 매우 자유롭습니다.
        */
        StringBuilder st;//Stringbuilder(문자 리스트 개념) 변수 선언
        for(int i = 0;i<10;i++){
            st = new StringBuilder();//초기화
            //문자열 곱셈이 없으므로 문자를 정해진 횟수만큼 더합니다
            for(int j=0;j<i;j++){
                st.append("*");//파이썬에서 봤던 그 리스트 덧붙이기 함수!
            }
            System.out.println(st);
        }//뭔가 이쯤 되면 왜 이리 복잡하냐 싶으시겠지만 다 이유가 있습니다.


        //1번방법 '자바스럽게' 고치기 (2)
        String sClass = "*";
        for(int i = 0;i<10;i++){
            //String 클래스의 repeat 메서드 실행! => 지정 횟수만큼 반복한 리터럴 반환!
            System.out.println(sClass.repeat(i));
        }//더 '간단한' 방법이 있기 때문이죠.


        //별그리기 방법 2 : 지정된 횟수만큼 그리기
        //골치아픈 문자열 처리를 피하려면 이런 방법도 있습니다. 다만 클래스 메서드 쓰는게 훨씬 간단하네요.
        for(int i = 0; i<10; i++){
            for(int j = 0;j<=i;j++){
                System.out.print("*");//* 하나만, 줄바꿈 없이 그림
            }
            System.out.println();//줄바꾸기
        }

        //별그리기 응용 : 거꾸로 그리기
        sClass = "*";
        for(int i = 0;i<10;i++){
            System.out.println(sClass.repeat(10-i));
        }
    }
}
