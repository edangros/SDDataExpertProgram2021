
예전에 클래스와 인터페이스 관련 감명깊게 본 말이 있어서 정리해봅니다.
===============================================
-------------클래스 vs 인터페이스--------------
===============================================
클래스의 상속, 특히 추상 클래스의 상속과 인터페이스의 상속은 본질적으로 같은 기능을 구현하는걸로 보인다.
하지만 둘 사이에는 사고방식의 차이가 존재하며, 그로 인해서 프로그래머의 성향에 따라 이용에도 차이를 보이게 된다.

1. 클래스
클래스는 '본질'이다. '본질'은 언어에서의 '명사'에 의해 정의된다. 따라서 클래스 중심의 사고는 객체 중심적인 사고이며
명사 중심적인 사고이다. 논리적인 비교, 명제의 도출 등 명사적인 사고에 의해 모든 기능들이 구현한다.

ex) Human A = new Human / A는 사람이다. (명사는 명사다)
Human extends Animal / 사람은 동물에 속한다. (논리적인 포함 관계)
Human.class == Animal / 사람은 동물이다 (명제의 도출)


2. 인터페이스
인터페이스는 '기능'이자 '소통구'이다. '기능'은 어떠한 주체가 '할 수 있는 일'을 의미한다. 따라서 인터페이스 중심의 사고는
동작 지향적인 사고이며, 기능 중심적이고, 동사 중심적인 사고이다. 어떠한 가능성, 기능성 등 동사적인 사고에 의해 모든 기능
들이 구현된다.

ex) IMovable c  / c는 '움직일 수 있는 존재들'이 배치될 수 있다. (더이상 변수명이라는 주체도 명사가 아니다)
Human implements IMovable / 사람은 움직이는 기능을 보유한다. ('움직일 수 있다'라는 '사람'의 기능성)


따라서 모든 클래스명은 명사로 되어있다. (ex: MovableObject)
인터페이스명은 기능성이나 가능성으로 되어있다 (ex: IMovable)



<'다리미 예재'>
다음 세 종류를 어떻게 구현할 건가?
'전기 다리미', '스팀 다리미', '의류 스타일러'

-'전기 다리미'와 '스팀 다리미'의 본질은 '다리미'이다. 따라서 '다리미' 상위 클래스의 자식 클래스로 구현할 수 있다.
-하지만 의류 스타일러는 '다리미'라는 본질을 보유하고 있지 않다.
-그러나 의류 스타일러는 다리미와 '빨래 말리기'와 '각잡기'라는 공통된 기능을 보유하고 있다.
-따라서 '빨래 말리기'와 '각잡기'라는 인터페이스를 만들고, 이 인터페이스를 다리미와 스타일러가 상속하면 모든 구조가 완성된다.

하지만 현실은 이렇게 딱딱 떨어지지 않으며, 프로그래머(또는 프로그래머 팀)의 성향에 따라 인터페이스의 사용 정도는 차이를 보인다.

그 이유는 기능 중심적인 사고는 명사적인 사고방식으로도 가능하기 때문이다.
-'다리미'와 '의류 스타일러'는 모두 '빨래말리기 능력'과 '각잡기 능력'을 지니고 있다.
-따라서 '빨래말리기 능력'과 '각잡기 능력'을 하위 멤버로 가지고 있다. 끝.

Styler extends Electronics{
    Dryability dryability = new Dryability(); <- 동사가 아니라 명사가 되어서 들어왔다.

Styler extends DryableThings{<-아예 동사를 명사로 바꾸어서 상속받아버렸다.
